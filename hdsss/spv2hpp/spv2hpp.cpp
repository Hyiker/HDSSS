#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
const char* header =
    "// This file is generated by the SPIR-V compiler\n"
    "#ifndef SHADERCONST_%s_HPP\n"
    "#define SHADERCONST_%s_HPP\n"
    "#include <vector>\n"
    "static const std::vector<unsigned char> %s = {%s};\n"
    "#endif /* SHADERCONST_%s_HPP */";

#define BUFFER_SIZE 4096
#define RESULT_BUFFER_SIZE 1024 * 1024 * 10
inline char separator() {
#ifdef _WIN32
    return '\\';
#else
    return '/';
#endif
}
void extract_filename(const char* path, char* buffer, size_t buffer_size) {
    const char* filename = strrchr(path, separator());
    if (filename == NULL) {
        filename = (char*)path;
    } else {
        filename++;
    }
    const char* dot_const = strrchr(filename, '.');
    char* dot = const_cast<char*>(dot_const);
    if (dot != NULL) {
        *dot = '\0';
    }
    int i = 0;
    for (const char* c = filename; *c != '\0' && i < buffer_size - 1;
         c++, i++) {
        if (*c == '.') {
            buffer[i] = '_';
        } else {
            buffer[i] = toupper(*c);
        }
    }
    buffer[i] = '\0';
}
char* read_file_as_hex(FILE* fp) {
    if (fp == NULL) {
        return NULL;
    }
    size_t buffer_size = 4096;
    char* buffer = (char*)malloc(buffer_size);
    if (buffer == NULL) {
        fclose(fp);
        return NULL;
    }
    size_t bytes_read = 0;
    size_t total_bytes = 0;
    while ((bytes_read = fread(buffer + total_bytes, 1,
                               buffer_size - total_bytes, fp)) > 0) {
        total_bytes += bytes_read;
        if (total_bytes >= buffer_size) {
            buffer_size += 4096;
            buffer = (char*)realloc(buffer, buffer_size);
            if (buffer == NULL) {
                fclose(fp);
                return NULL;
            }
        }
    }
    fclose(fp);
    char* result = (char*)malloc(RESULT_BUFFER_SIZE);
    if (result == NULL) {
        free(buffer);
        return NULL;
    }
    size_t j = 0;
    for (size_t i = 0; i < total_bytes; i++) {
        j += sprintf(result + j, "0x%02X,", buffer[i] & 0xff);
    }
    if (total_bytes > 0) {
        j--;
    }
    result[j] = '\0';
    free(buffer);
    return result;
}

int main(int argc, char* argv[]) {
    if (argc == 2 && strcmp(argv[1], "--version") == 0) {
        printf("114514\n");
        return 0;
    }
    if (argc != 3) {
        fprintf(stderr, "Usage: spv2hpp <input.spv> <output.hpp>\n");
        return 1;
    }
    FILE* input = fopen(argv[1], "rb");
    if (!input) {
        fprintf(stderr, "Failed to open input file: %s\n", argv[1]);
        return 1;
    }
    FILE* output = fopen(argv[2], "w+");
    if (!output) {
        fprintf(stderr, "Failed to open output file: %s\n", argv[2]);
        return 1;
    }
    char filenameNoExtension[1024];
    extract_filename(argv[1], filenameNoExtension, sizeof(filenameNoExtension));
    char* hex = read_file_as_hex(input);
    if (hex == NULL) {
        fprintf(stderr, "Failed to read input file\n");
        return 1;
    }
    fprintf(output, header, filenameNoExtension, filenameNoExtension,
            filenameNoExtension, hex, filenameNoExtension);
    free(hex);
    fclose(input);
    fclose(output);

    return 0;
}